"""Rename Bug to Issue and add issue_type

Revision ID: ae144d1f417c
Revises: 756e9e5fe99e
Create Date: 2025-09-29 20:03:19.580252

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import ENUM


# revision identifiers, used by Alembic.
revision = 'ae144d1f417c'
down_revision = '756e9e5fe99e'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if Bug table exists and rename to Issue, otherwise just add issue_type column
    connection = op.get_bind()
    
    # Check if Bug table exists
    bug_table_exists = connection.execute(sa.text("""
        SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name = 'Bug'
        );
    """)).scalar()
    
    # Check if Issue table exists
    issue_table_exists = connection.execute(sa.text("""
        SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name = 'Issue'
        );
    """)).scalar()
    
    if bug_table_exists:
        # Rename Bug table to Issue
        op.rename_table('Bug', 'Issue')
        
        # Update foreign key references in other tables
        op.execute("ALTER TABLE \"Comment\" RENAME COLUMN bug_id TO issue_id")
        op.execute("ALTER TABLE \"Attachment\" RENAME COLUMN bug_id TO issue_id")
        
        # Update foreign key constraints
        op.drop_constraint('Comment_bug_id_fkey', 'Comment', type_='foreignkey')
        op.drop_constraint('Attachment_bug_id_fkey', 'Attachment', type_='foreignkey')
        
        op.create_foreign_key('Comment_issue_id_fkey', 'Comment', 'Issue', ['issue_id'], ['id'])
        op.create_foreign_key('Attachment_issue_id_fkey', 'Attachment', 'Issue', ['issue_id'], ['id'])
    
    # Add issue_type column to Issue table if it doesn't exist
    if issue_table_exists or bug_table_exists:
        # Check if issue_type column already exists
        issue_type_exists = connection.execute(sa.text("""
            SELECT EXISTS (
                SELECT FROM information_schema.columns 
                WHERE table_schema = 'public' 
                AND table_name = 'Issue'
                AND column_name = 'issue_type'
            );
        """)).scalar()
        
        if not issue_type_exists:
            # Create the enum type if it doesn't exist
            op.execute("CREATE TYPE issue_type AS ENUM ('bug', 'feature', 'task', 'security')")
            op.add_column('Issue', sa.Column('issue_type', ENUM('bug', 'feature', 'task', 'security', name='issue_type'), nullable=False, server_default='bug'))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Reverse the changes
    op.drop_constraint('Comment_issue_id_fkey', 'Comment', type_='foreignkey')
    op.drop_constraint('Attachment_issue_id_fkey', 'Attachment', type_='foreignkey')
    
    op.create_foreign_key('Comment_bug_id_fkey', 'Comment', 'Bug', ['bug_id'], ['id'])
    op.create_foreign_key('Attachment_bug_id_fkey', 'Attachment', 'Bug', ['bug_id'], ['id'])
    
    op.execute("ALTER TABLE \"Comment\" RENAME COLUMN issue_id TO bug_id")
    op.execute("ALTER TABLE \"Attachment\" RENAME COLUMN issue_id TO bug_id")
    
    op.drop_column('Issue', 'issue_type')
    op.rename_table('Issue', 'Bug')
    # ### end Alembic commands ###
